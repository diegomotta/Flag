/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Interface;

import Clases.Caja;
import Clases.ImprimirMovimientos;
import Clases.Lote;
import Clases.Maestro;
import Clases.Movimiento;
import Clases.Operario;
import Clases.Remiseria;
import Clases.Utilidad;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.JXDatePicker;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author garba
 */
public class JDialogResumenes extends javax.swing.JDialog {

    private Caja unaCaja;
    private List<Movimiento> losMovimientos = new LinkedList<>();
    private List<Movimiento> filtro2;
    private double totalIn = 0.0;
    private double totalEg = 0.0;
    private Remiseria remiseria;
    private Operario unOperario;
    private Maestro unMaestro;
    private Utilidad utilidades = new Utilidad();
    /**
     * Creates new form JDialogResumenes
     */
    public JDialogResumenes(java.awt.Frame parent, boolean modal, Caja unaCaja,Remiseria remiseria, Maestro unMaestro, Operario unOperario) {
        super(parent, modal);
        this.unaCaja = unaCaja;
        this.remiseria = remiseria;
        this.unMaestro = unMaestro;
        this.unOperario = unOperario;
        initComponents();
        this.tbl_movCaja.getColumn("Ingreso").setMaxWidth(200);
        this.tbl_movCaja.getColumn("Egreso").setMaxWidth(200);
        this.tbl_movCaja.getColumn("Detalle").setMaxWidth(200);
        this.tbl_movCaja.getColumn("Fecha").setMaxWidth(200);
        this.tbl_movCaja.getColumn("Hora").setMaxWidth(200);
        cmbNumeroLote.removeAllItems();
        List <Lote> listaLote = new LinkedList();
        if(unaCaja.getLotes()!= null)
        {
            Collection l = unaCaja.getLotes().values();
            Iterator iter = l.iterator();
            while(iter.hasNext())
            {
                listaLote.add((Lote) iter.next());
            }
            Collections.sort(listaLote, new Comparator<Lote>() {
                    @Override
                    public int compare(Lote p1, Lote p2) {                
                            return new Integer(p1.getIdLote()).compareTo(new Integer(p2.getIdLote()));
                    }
            });                
            for (Lote unLote : listaLote) {
                cmbNumeroLote.addItem(unLote.getIdLote());
            }
        }
//        chec_clave.setSelected(false);
        cbx_fechas.setSelectedIndex(1);
        cbx_fechas.setSelectedIndex(0);
        this.setModal(true);
        this.setLocationRelativeTo(null);  
        AutoCompleteDecorator.decorate(this.cmbNumeroLote);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        cbx_fechas = new javax.swing.JComboBox();
        dp_desde = new org.jdesktop.swingx.JXDatePicker();
        dp_hasta = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_año = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_mes = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_movCaja = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        chec_NL = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        cbx_tipos = new javax.swing.JComboBox();
        cmbNumeroLote = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lbl_ingresos = new javax.swing.JLabel();
        lbl_egresos = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(117, 150, 227));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        cbx_fechas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbx_fechas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Día", "Mes", "Año", "Período" }));
        cbx_fechas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbx_fechasItemStateChanged(evt);
            }
        });

        dp_desde.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        dp_hasta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Goudy Old Style", 0, 18)); // NOI18N
        jLabel1.setText("Fechas:");

        jLabel2.setFont(new java.awt.Font("Goudy Old Style", 0, 18)); // NOI18N
        jLabel2.setText("Desde:");

        jLabel3.setFont(new java.awt.Font("Goudy Old Style", 0, 18)); // NOI18N
        jLabel3.setText("Hasta:");

        txt_año.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_año.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txt_año.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_añoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_añoKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Goudy Old Style", 0, 18)); // NOI18N
        jLabel4.setText("Año:");

        jLabel5.setFont(new java.awt.Font("Goudy Old Style", 0, 18)); // NOI18N
        jLabel5.setText("Mes:");

        txt_mes.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_mes.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txt_mes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_mesKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_mesKeyTyped(evt);
            }
        });

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane2.setMaximumSize(null);

        tbl_movCaja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ingreso", "Egreso", "Detalle", "Fecha", "Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbl_movCaja);

        jButton2.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/PRINTER 1.png"))); // NOI18N
        jButton2.setText("   Listar");
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Goudy Old Style", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/computer.png"))); // NOI18N
        jButton1.setText("Visualizar");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(117, 150, 227));

        chec_NL.setBackground(new java.awt.Color(117, 150, 227));
        chec_NL.setFont(new java.awt.Font("Goudy Old Style", 0, 18)); // NOI18N
        chec_NL.setText("Número de Lote:");
        chec_NL.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chec_NLItemStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Goudy Old Style", 0, 18)); // NOI18N
        jLabel6.setText("Tipo de Movimiento:");

        cbx_tipos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbx_tipos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Ingresos", "Egresos" }));
        cbx_tipos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbx_tiposItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(chec_NL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbNumeroLote, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbx_tipos, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbx_tipos, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chec_NL)
                    .addComponent(cmbNumeroLote, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(117, 150, 227));

        jLabel8.setBackground(new java.awt.Color(117, 150, 227));
        jLabel8.setFont(new java.awt.Font("Goudy Old Style", 1, 18)); // NOI18N
        jLabel8.setText("Totales:");

        lbl_ingresos.setBackground(new java.awt.Color(51, 255, 51));
        lbl_ingresos.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lbl_ingresos.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        lbl_ingresos.setOpaque(true);

        lbl_egresos.setBackground(new java.awt.Color(255, 51, 51));
        lbl_egresos.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lbl_egresos.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        lbl_egresos.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_ingresos, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbl_egresos, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_egresos, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(lbl_ingresos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(75, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbx_fechas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4))
                                        .addGap(5, 5, 5)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txt_año)
                                            .addComponent(txt_mes, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dp_desde, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                            .addComponent(dp_hasta, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1009, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cbx_fechas, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txt_mes, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(dp_desde, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_año, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(dp_hasta, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel29.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel30.setFont(new java.awt.Font("Goudy Old Style", 1, 24)); // NOI18N
        jLabel30.setText("Detalle de movimientos");

        javax.swing.GroupLayout jPanel29Layout = new javax.swing.GroupLayout(jPanel29);
        jPanel29.setLayout(jPanel29Layout);
        jPanel29Layout.setHorizontalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel29Layout.setVerticalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel29, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbx_fechasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbx_fechasItemStateChanged
        if (cbx_fechas.getSelectedIndex() == 1) {
            txt_año.setEnabled(false);
            txt_mes.setEnabled(false);
            dp_desde.setEnabled(true);
            dp_hasta.setEnabled(false);
        } else if (cbx_fechas.getSelectedIndex() == 2) {
            txt_año.setEnabled(false);
            txt_mes.setEnabled(true);
            dp_desde.setEnabled(false);
            dp_hasta.setEnabled(false);
        } else if (cbx_fechas.getSelectedIndex() == 3) {
            txt_año.setEnabled(true);
            txt_mes.setEnabled(false);
            dp_desde.setEnabled(false);
            dp_hasta.setEnabled(false);

        } else if (cbx_fechas.getSelectedIndex() == 4) {
            txt_año.setEnabled(false);
            txt_mes.setEnabled(false);
            dp_desde.setEnabled(true);
            dp_hasta.setEnabled(true);
        } else {
            txt_año.setEnabled(false);
            txt_mes.setEnabled(false);
            dp_desde.setEnabled(false);
            dp_hasta.setEnabled(false);
        }
    }//GEN-LAST:event_cbx_fechasItemStateChanged

    private void cbx_tiposItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbx_tiposItemStateChanged

    }//GEN-LAST:event_cbx_tiposItemStateChanged
public static boolean enteroPuro(char caracter) {
        boolean res = true;
        //12 = borrar; 127 = suprimir; 46 = punto; 44 = coma
        if (!Character.isDigit(caracter)) {
            if (caracter != (char) '\b') {
                if (caracter != (char) 127) {
                    res = false;
                    java.awt.Toolkit.getDefaultToolkit().beep();


                }
            }
        }
        return res;
    }
    private void txt_añoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_añoKeyPressed
        if (!this.enteroPuro(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_añoKeyPressed

    private void txt_mesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mesKeyPressed
        if (!this.enteroPuro(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_mesKeyPressed

    private void chec_NLItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chec_NLItemStateChanged
        if (chec_NL.isSelected()) {
            cbx_fechas.setSelectedIndex(0);
            cbx_fechas.setEnabled(false);
//            chec_clave.setSelected(false);
//            chec_clave.setEnabled(false);
//            txt_clave.setText("");
            cbx_tipos.setEnabled(false);

        }else{
            cbx_fechas.setSelectedIndex(0);
            cbx_fechas.setEnabled(true);
//            chec_clave.setEnabled(true);
//            txt_clave.setText("");
            cbx_tipos.setEnabled(true);}
    }//GEN-LAST:event_chec_NLItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List<Movimiento> filtro = new LinkedList<>();
        filtro2 = new LinkedList<>();

        if (chec_NL.isSelected()) {
            losMovimientos.clear();
            if (cmbNumeroLote.getSelectedIndex() != -1) 
            {
                List <Lote> listaLote = new LinkedList();
                Collection l = unaCaja.getLotes().values();
                Iterator iter = l.iterator();
                while(iter.hasNext())
                {
                    listaLote.add((Lote) iter.next());
                }
                for (Lote unLote : listaLote) {
                   if (unLote.getIdLote().equals(cmbNumeroLote.getSelectedItem())) {
                        List <Movimiento> listaMov1 = new LinkedList();
                        Collection listMovimientos = unLote.getMovimientos().values();
                        Iterator iter2 = listMovimientos.iterator();
                        while(iter2.hasNext())
                        {
                            listaMov1.add((Movimiento) iter2.next());
                        }
                        for (Movimiento unMovimiento : listaMov1) {
                            losMovimientos.add(unMovimiento);
                        }
                        break;
                    }
                }
                filtro2 = losMovimientos;

            }
        } else {
            cmbNumeroLote.removeAllItems();
            losMovimientos.clear();
            List <Lote> listaLoteo = new LinkedList();
            Collection l = unaCaja.getLotes().values();
            Iterator iter = l.iterator();
            while(iter.hasNext())
            {
                listaLoteo.add((Lote) iter.next());
            }            
            for (Lote unLote : listaLoteo) {
                cmbNumeroLote.addItem(unLote.getIdLote());
                List <Movimiento> listaMov3 = new LinkedList();
                Collection listMovimientos = unLote.getMovimientos().values();
                Iterator iter2 = listMovimientos.iterator();
                while(iter2.hasNext())
                {
                    listaMov3.add((Movimiento) iter2.next());
                }                
                for (Movimiento unMovimiento : listaMov3) {
                    losMovimientos.add(unMovimiento);
                }
            }

            if (cbx_fechas.getSelectedIndex() == 0) {
//                if (chec_clave.isSelected()) {
//                    String palabraClave = txt_clave.getText().toUpperCase().trim();
//                    for (Movimiento unMovimiento : losMovimientos) {
//                        if (unMovimiento.getConcepto().toUpperCase().trim().contains(palabraClave)) {
//                            filtro2.add(unMovimiento);
//                        }
//                    }
//                } else {
                    if (cbx_tipos.getSelectedIndex() == 1) {
                        for (Movimiento one : losMovimientos) {
                            if (one.getTipo().equals("Ingreso")) {
                                filtro2.add(one);
                            }
                        }
                    } else if (cbx_tipos.getSelectedIndex() == 2) {
                        for (Movimiento one : losMovimientos) {
                            if (one.getTipo().equals("Egreso")) {
                                filtro2.add(one);
                            }
                        }
                    } else {
                        filtro2 = losMovimientos;

                    }
                

            } else if (cbx_fechas.getSelectedIndex() == 1) {
                Calendar fechaMov = Calendar.getInstance();
                Calendar fechaDP = Calendar.getInstance();
                fechaDP.setTime(dp_desde.getDate());
                for (Movimiento unMovimiento : losMovimientos) {
                    fechaMov.setTime(unMovimiento.getFecha_dia());
                    if (fechaMov.get(Calendar.DAY_OF_YEAR) == fechaDP.get(Calendar.DAY_OF_YEAR)) {
                        filtro.add(unMovimiento);
                    }
                }

//                if (chec_clave.isSelected()) {
//                    String palabraClave = txt_clave.getText().toUpperCase().trim();
//                    for (Movimiento unMovimiento : filtro) {
//                        if (unMovimiento.getConcepto().toUpperCase().trim().contains(palabraClave)) {
//                            filtro2.add(unMovimiento);
//                        }
//                    }
//                } else {
                    if (cbx_tipos.getSelectedIndex() == 1) {
                        for (Movimiento one : filtro) {
                            if (one.getTipo().equals("Ingreso")) {
                                filtro2.add(one);
                            }
                        }
                    } else if (cbx_tipos.getSelectedIndex() == 2) {
                        for (Movimiento one : filtro) {
                            if (one.getTipo().equals("Egreso")) {
                                filtro2.add(one);
                            }
                        }
                    } else {
                        filtro2 = filtro;
                    }
                

            } else if (cbx_fechas.getSelectedIndex() == 2) {
                if (!txt_mes.getText().isEmpty()) {
                    Calendar unCalendar = Calendar.getInstance();
                    for (Movimiento unMovimiento : losMovimientos) {
                        unCalendar.setTime(unMovimiento.getFecha_dia());
                        if (unCalendar.get(Calendar.MONTH) == (Integer.parseInt(txt_mes.getText()) - 1)) {
                            filtro.add(unMovimiento);
                        }
                    }

//                    if (chec_clave.isSelected()) {
//                        String palabraClave = txt_clave.getText().toUpperCase().trim();
//                        for (Movimiento unMovimiento : filtro) {
//                            if (unMovimiento.getConcepto().toUpperCase().trim().contains(palabraClave)) {
//                                filtro2.add(unMovimiento);
//                            }
//                        }
//                    } else {
                        if (cbx_tipos.getSelectedIndex() == 1) {
                            for (Movimiento one : filtro) {
                                if (one.getTipo().equals("Ingreso")) {
                                    filtro2.add(one);
                                }
                            }
                        } else if (cbx_tipos.getSelectedIndex() == 2) {
                            for (Movimiento one : filtro) {
                                if (one.getTipo().equals("Egreso")) {
                                    filtro2.add(one);
                                }
                            }
                        } else {
                            filtro2 = filtro;
                        }
                    

                } else {
                    JOptionPane.showMessageDialog(this, "Debe ingresar el valor numérico del año que desea visualizar");
                }
            } else if (cbx_fechas.getSelectedIndex() == 3) {
                if (!txt_año.getText().isEmpty()) {
                    Calendar fechaMov = Calendar.getInstance();
                    for (Movimiento unMovimiento : losMovimientos) {
                        fechaMov.setTime(unMovimiento.getFecha_dia());
                        if (fechaMov.get(Calendar.YEAR) == (Integer.parseInt(txt_año.getText()))) {
                            filtro.add(unMovimiento);
                        }
                    }
//                    if (chec_clave.isSelected()) {
//                        String palabraClave = txt_clave.getText().toUpperCase().trim();
//                        for (Movimiento unMovimiento : filtro) {
//                            if (unMovimiento.getConcepto().toUpperCase().trim().contains(palabraClave)) {
//                                filtro2.add(unMovimiento);
//                            }
//                        }
//                    } else {
                        if (cbx_tipos.getSelectedIndex() == 1) {
                            for (Movimiento one : filtro) {
                                if (one.getTipo().equals("Ingreso")) {
                                    filtro2.add(one);
                                }
                            }
                        } else if (cbx_tipos.getSelectedIndex() == 2) {
                            for (Movimiento one : filtro) {
                                if (one.getTipo().equals("Egreso")) {
                                    filtro2.add(one);
                                }
                            }
                        } else {
                            filtro2 = filtro;
                        }
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Debe ingresar el valor numérico del año que desea visualizar");
                }
            } else if (cbx_fechas.getSelectedIndex() == 4) {
                Calendar fechaMov = Calendar.getInstance();
                Calendar desde = Calendar.getInstance();
                Calendar hasta = Calendar.getInstance();
                desde.setTime(dp_desde.getDate());
                hasta.setTime(dp_hasta.getDate());

                for (Movimiento unMovimiento : losMovimientos) {
                    fechaMov.setTime(unMovimiento.getFecha_dia());
                    if ((fechaMov.equals(desde) || fechaMov.after(desde)) && (fechaMov.equals(hasta) || fechaMov.before(hasta))) {
                        filtro.add(unMovimiento);
                    }
                }
//                if (chec_clave.isSelected()) {
////                    String palabraClave = txt_clave.getText().toUpperCase().trim();
////                    for (Movimiento unMovimiento : filtro) {
////                        if (unMovimiento.getConcepto().toUpperCase().trim().contains(palabraClave)) {
////                            filtro2.add(unMovimiento);
////                        }
//                    }
//                } else {
                    if (cbx_tipos.getSelectedIndex() == 1) {
                        for (Movimiento one : filtro) {
                            if (one.getTipo().equals("Ingreso")) {
                                filtro2.add(one);
                            }
                        }
                    } else if (cbx_tipos.getSelectedIndex() == 2) {
                        for (Movimiento one : filtro) {
                            if (one.getTipo().equals("Egreso")) {
                                filtro2.add(one);
                            }
                        }
                    } else {
                        filtro2 = filtro;
                    }
                

            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar el valor numérico del año que desea visualizar");
            }

        }

        totalIn = 0.0;
        totalEg = 0.0;
        DecimalFormatSymbols simbolos = new DecimalFormatSymbols();
        simbolos.setDecimalSeparator('.');
        DecimalFormat formateador = new DecimalFormat("###########.##",simbolos);
        for (Movimiento unMovimiento : filtro2) {
            if (unMovimiento.getTipo().equals("Ingreso")) {
                totalIn = totalIn + unMovimiento.getImporte();
            } else {
                totalEg = totalEg + unMovimiento.getImporte();
            }

        }
        totalIn = Double.parseDouble(formateador.format(totalIn));
        totalEg = Double.parseDouble(formateador.format(totalEg));
        lbl_ingresos.setText("$ "+String.valueOf(totalIn));
        lbl_egresos.setText("$ "+String.valueOf(totalEg));

        this.cargarTablaCaja(tbl_movCaja, filtro2, null, null);
        //this.updateUI();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public  void limpiar_tabla(JTable tabla) {
        int filas = tabla.getRowCount();
        for (int i = 0; i < filas; i++) {
            ((DefaultTableModel) tabla.getModel()).removeRow(0);
        }
    }
    
    public  void cargarTablaCaja(JTable tabla, List<Movimiento> lista, JXDatePicker desde, JXDatePicker hasta) {
        limpiar_tabla(tabla);
        for (Movimiento unMovimiento : lista) {

            ((DefaultTableModel) tabla.getModel()).addRow((unMovimiento).toVector());
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            LinkedList <ImprimirMovimientos> lista = new LinkedList<ImprimirMovimientos>(); 
            List f = filtro2;
            if(f != null)
            {
                Iterator iter = f.iterator();
                Movimiento aux = null;
                while(iter.hasNext())
                {
                    aux = (Movimiento) iter.next();
                    String fecha_dia = utilidades.getFecha(aux.getFecha_dia());
                    String hora_mov = aux.getHora_mov();
                    String entrada="";
                    String tipo = null;
                    String salida = "";
                    if(aux.getTipo().equals("Ingreso"))
                    {
                        entrada ="$ "+ String.valueOf(aux.getImporte());
                        tipo = "Ingreso";
                    }
                    else if(aux.getTipo().equals("Egreso"))
                    {
                        salida ="$ "+ String.valueOf(aux.getImporte()); 
                        tipo = "Egreso";
                    }
                    String concepto = aux.getConcepto();

                    lista.add(new ImprimirMovimientos(fecha_dia,hora_mov,entrada,salida,tipo,concepto,""));
                }
                HashMap<String, Object> parametros = new HashMap();
                parametros.clear();
                if(unMaestro != null)
                {
                     parametros.put("operario1",unMaestro.getNombre()+" "+unMaestro.getApellido());
                }
                else if(unOperario != null)
                {
                    parametros.put("operario1",unOperario.getNombre()+" "+unOperario.getApellido());
                }
                parametros.put("nombreEmpresa",remiseria.getNombre());
                parametros.put("direccionEmpresa","Calle "+remiseria.getUnDomicilio().getCalle()+" N° "+remiseria.getUnDomicilio().getNroCasa());
                parametros.put("telefonoEmpresa",remiseria.getUnTelefono().toString());
                parametros.put("fechaActual", utilidades.getFechaActual());
                parametros.put("paisprovincia", remiseria.getUnDomicilio().getUnaCiudad().getNombreCiudad()+"-"+remiseria.getUnDomicilio().getUnaProvincia().getNombreProvincia()+" "+remiseria.getUnDomicilio().getUnPais().getNombrePais());            
                parametros.put("totalIng","$ "+ totalIn);
                parametros.put("totalEg","$ "+ totalEg);
                parametros.put("logo", remiseria.getLogo());
                //C:/Users/garba/Desktop/Reportes/
                //JasperReport jasper = JasperCompileManager.compileReport("src/Reportes/Movimientos_de_Caja.jrxml");
                JasperReport jasper = JasperCompileManager.compileReport("C:/Users/garba/Desktop/Reportes/Movimientos_de_Caja.jrxml");
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasper, parametros, new JRBeanCollectionDataSource(lista));
                JasperViewer jviewer = new JasperViewer(jasperPrint, false);

                JDialog frame;
                frame = new JDialog();
                frame.getContentPane().removeAll();
                frame.getContentPane().add(jviewer.getContentPane());
                frame.pack();
                frame.setModal(true);
                frame.setSize(1100, 600);
                frame.setLocationRelativeTo(null);
                frame.show();
            }
            else
            {
                JOptionPane.showInternalMessageDialog(null, "Debe visualizar los movimientos en la tabla para poder realizar el reporte", null, JOptionPane.ERROR_MESSAGE);
            }
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_mesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mesKeyTyped
        // TODO add your handling code here:
                int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }
        if (k == 241 || k == 209) {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }
    }//GEN-LAST:event_txt_mesKeyTyped

    private void txt_añoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_añoKeyTyped
        // TODO add your handling code here:
                int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }
        if (k == 241 || k == 209) {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
        }
    }//GEN-LAST:event_txt_añoKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogResumenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogResumenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogResumenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogResumenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogResumenes dialog = new JDialogResumenes(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbx_fechas;
    private javax.swing.JComboBox cbx_tipos;
    private javax.swing.JCheckBox chec_NL;
    private javax.swing.JComboBox cmbNumeroLote;
    private org.jdesktop.swingx.JXDatePicker dp_desde;
    private org.jdesktop.swingx.JXDatePicker dp_hasta;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_egresos;
    private javax.swing.JLabel lbl_ingresos;
    private javax.swing.JTable tbl_movCaja;
    private javax.swing.JTextField txt_año;
    private javax.swing.JTextField txt_mes;
    // End of variables declaration//GEN-END:variables
}
